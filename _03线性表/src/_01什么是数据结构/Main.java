package _01什么是数据结构;

public class Main {
	public static void main(String[] args) {
		/*
		 * 一、什么是数据结构
		 * 
		 * 数据结构就是计算机组织数据和存储数据的方式。
		 * 所谓组织数据的方式就是指计算机怎样表示一堆数据里节点与节点之间存在的逻辑关系，它又叫逻辑结构，
		 * 跟节点在计算机中存储的内存位置无关；
		 * 所谓存储数据的方式就是指计算机怎样存储一堆数据，它又叫存储结构，
		 * 即一堆数据以什么样的形式存储在计算机内存中。
		 */ 
		
		/*
		 * 二、数据结构的分类
		 * 
		 * 1、数据结构按照组织数据的方式（即逻辑结构）可以分为（见【数据结构按逻辑结构分类.png】）：
		 * （1）线性结构（线性表）：
		 * 其主要特征是1️⃣有唯一的第一个元素，2️⃣有唯一的最后一个元素，3️⃣中间每一个节点元素有唯一的前驱节点和唯一的后继节点，
		 * 第一个元素只有后继节点、没有前驱节点，最后一个元素只有前驱节点、没有后继节点。
		 * 
		 * 也就是说线性结构指的是元素之间存在“一对一”的逻辑关系————即元素之间是有序的。
		 * 
		 * 数组、链表、栈、队列、哈希表（也叫散列表）都是线性结构。
		 * 
		 * （2）树形结构（树）：
		 * 其主要特征是1️⃣有唯一的第一个元素————即根节点，2️⃣最后的元素可能有一个或有多个，因为分叉了好几代，3️⃣中间每一
		 * 个节点元素有唯一的前驱节点，但是可以有一个或多个后继节点，根节点只有后继节点、没有前驱节点，最后的元素只有前驱节点、
		 * 没有后继节点。
		 * 
		 * 也就是说树形结构指的是元素之间存在“一对多”逻辑关系。
		 * 
		 * 堆、二叉树、AVL树、红黑树、哈夫曼树都是树形结构。
		 * 
		 * （3）图形结构（图）：
		 * 其主要特征是1️⃣任意两个节点之间都可能存在关系，没有哪个节点一定是第一个元素或最后一个元素或中间元素————即在图形结构
		 * 中不存在这些说法。
		 * 
		 * 也就是说图形结构指的是元素之间存在“多对多”的逻辑关系。
		 * 
		 * 邻接矩阵、邻接表都是图形结构。
		 * 
		 * 	2、数据结构按照存储数据的方式————即存储结构————可以分为：
		 * （1）顺序存储：借助元素在内存中的相对位置来表示元素之间的逻辑关系；
		 * （2、3、4）链式存储、索引存储、哈希存储：借助元素在内存中的内存地址来表示元素之间的逻辑关系。
		 * 
		 * 实际应用中，我们会根据使用场景来选择最合适的数据结构，即什么时候该使用线性表、什么时候该使用树、什么时候该使用图等，
		 * 精心选择的数据结构可以带来更高的运行或者存储效率。
		 */
		
		/*
		 * 三、举例
		 * 
		 * 说到这里我们就举个例子来加深一下对上面内容的理解：
		 * 
		 * 数组和链表都是线性结构，但它们的存储结构却不一样，数组是顺序存储，而链表是链式存储。
		 * 从逻辑结构的角度而言，数组和链表中的元素确实都是一对一的关系，即我们知道了一个节点，就必然能通过这个节点找到它的前驱
		 * 节点和后继节点，至于怎么找到的就恰恰体现了它们是如何通过存储结构来实现逻辑结构的。比方说数组，我们知道了一个元素，那
		 * 就必然能拿到这个元素的index，那index - 1就能拿到这个元素的前驱节点了，index + 1就能拿到这个元素的后继节点了，这
		 * 就恰恰体现了数组是通过顺序存储这种存储结构————即借助元素在内存中的相对位置来表示元素之间的逻辑关系，数组开辟的总是一
		 * 段连续的内存空间来存储数据的————来实现的它的逻辑结构的。又比方说链表，我们知道了一个元素，因为这个元素内部存储着它的
		 * 前驱节点和后继节点的内存地址，所以也能顺利找到，这也恰恰体现了链表是通过链式存储这种存储结构————即借助元素在内存中的
		 * 内存地址来表示元素之间的逻辑关系，链表开辟的不是一段连续的内存空间来存储数据————来实现它的逻辑结构的。
		 */
	}
}
