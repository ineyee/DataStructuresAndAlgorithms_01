package _02动态数组;

public class _01Java里的数组 {
	public static void main(String[] args) {
		test1();
	}
	
	public static void test() {
		/*
		 * 1、Java是面向对象的语言，它里面所有的引用类型最终都继承自Object。
		 * 我们这里说的“Java里的数组”特指Java里的基本数组，因为Java里还有一个动态数组，它们俩都是引用类型。
		 * 其实基本数组很像C语言里的数组，用法也基本一样，当然因为C语言是面向过程的语言，所以C语言里的数组虽然是个指针类型，但它并没有什么继承体系，
		 * 而动态数组则很像OC里的数组，用法也基本一样，动态数组是基于基本数组实现的，NSArray和NSMutableArray是基于C语言数组实现的。
		 * 
		 * 2、基本数组的类型为T[]，T就是数组里存储的数据类型，这就意味着Java里的数组只能存储同一类型的数据，这是数组的第一个特点；
		 * 数组的第二个特点是它的里面存储的元素是有序的。
		 * 其实在任何语言里数组都具备这两个特点，包括C语言里的数组、动态数组、NSArray和NSMutableArray等。
		 * 此外要说明的是基本数组和C语言里的数组一样，我们对它们能做的唯一操作就是通过index来设置和获取元素。
		 * 
		 * 3、基本数组这种数据结构在逻辑结构上来说是一个线性表，即数组中的元素是一对一的关系；在存储结构上是顺序存储，即它会在堆区
		 * 开辟一段连续的内存空间来存储它里面的元素。
		 */
		int[] array = new int[] {11, 22, 33};
		array[1] = 222;
		for (int i = 0; i < array.length; i++) {
			int temp = array[i];
			System.out.println(temp);
		}
	}
	
	public static void test1() {
		/*
		 * 4、在很多编程语言里，数组都有一个致命的缺陷，那就是数组的容量或者说数组的大小或者说数组所占用的内存空间必须在定义数组的
		 * 时候就指定，后面就不能再修改了，Java里也不例外。
		 * 
		 * 比方说下面这个例子，我们定义了一个数组array，只能在定义的时候就表明它要存储三个int类型整数，也就是12个字节，那么系统就会
		 * 在堆区开辟一个连续12字节的内存空间来依次存储11、12、13这三个值，但是定义之后我们就无法再往这个数组里添加东西了，因为数组
		 * 在堆区的内存空间早在定义时就确定了，永远是12个字节了。
		 * 
		 * 5、但实际开发中，无论在那种编程语言里，我们都会遇到“先定义一个数组，然后随时往数组里添加元素”的需求，的确我们开发中使用的
		 * 那些“数组”就能满足这个需求，这正是因为很多编程语言里都已经基于基本数组实现了动态数组来供我们使用，换句话说在很多编程语言里
		 * 我们使用的“数组”并不是真正的数组————即基本数组，而使用的是动态数组————即编程语言为我们提供的、基于基本数组实现的一个更好用
		 * 的“数组”。
		 * 
		 * 6、接下来我们就自己实现一个动态数组，来更深地理解理解我们在开发中几乎天天都在用的这个数据结构————动态数组。
		 */
		int[] array = new int[] {11, 22, 33};
//		array[3] = 44; // 运行报错
		for (int i = 0; i < array.length; i++) {
			int temp = array[i];
			System.out.println(temp);
		}
	}
}
