package _03求一个算法的时间复杂度_大O表示法;

public class Main {
	public static void main(String[] args) {
		
	}
	
	public static void test() {
		/*
		 * 一、我们先来介绍一下什么是大O表示法，然后再看怎么求一个算法的时间复杂度。
		 * 参考：
		 * 1、https://baijiahao.baidu.com/s?id=1662190834355918541&wfr=spider&for=pc
		 * 2、https://baike.baidu.com/item/%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95/1851162?fr=aladdin
		 * 
		 * 大O表示法的常见量级有：
		 * 1、常数级：O(1)，表示该算法的执行时间为一个常量，通常来说只要算法里没有循环等复杂结构，那么该算法的时间复杂度就是O(1)，无论这段代码是一行还是成千上万行
		 * 2、线性级：O(n)，表示该算法的执行时间会随着输入数据的变化而出现线性变化，最常见的就是对输入数据的单层for循环
		 * 3、平方级：O(n^2)，表示该算法的执行时间会随着输入数据的变化而出现二次增长，最常见的就是对输入数据的双层嵌套循环
		 * 4、立方级：O(n^3)，表示该算法的执行时间会随着输入数据的变化而出现三次增长，最常见的就是对输入数据的三层嵌套循环，如果嵌套层级不断加深，那么时间复杂度将是O(n^4)、O(n^k)
		 * 5、对数级：O(logn)，表示该算法的执行时间会随着输入数据的变化而出现对数增长，最常见的就是循环里i不是i++，而是i *= 2、i *= 3之类
		 * 6、线性对数级：O(nlogn)，就是将时间复杂度为O(logn)的代码循环了n遍，最常见的就是内层循环为对数级，外层循环为线性级的嵌套循环
		 * 7、指数级：O(2^n)，表示该算法的执行时间会随着输入数据的变化而出现指数级增长，最常见的就是求第N个斐波那契数的递归法
		 * 
		 * 补充，指数和对数是一对逆运算，比如：
		 * y = x ^ n，是指数运算，是用来求幂的，y叫作幂，x叫作底数，n叫作指数
		 * n = log(x)(y)，是对数运算，是用来求指数的
		 */
	}
	
	public static void test1() {
		/*
		 * 二、怎么求一个算法的时间复杂度?
		 * 
		 * 参考：
		 * 1、怎么求一个算法的时间复杂度：https://www.cnblogs.com/wonker/p/11236988.html
		 * 
		 * 第一步：找算法中的基本语句及基本语句的执行体
		 * 所谓基本语句就是指它的执行体执行次数最多的语句，而语句分为三大类顺序语句、条件语句、循环语句，
		 * 顺序语句的执行体就是这条语句本身，条件语句和循环语句的执行体就是大括号里面的东西。那么因为顺
		 * 序语句和条件语句的执行体都是只执行1次，而循环语句的执行体通常会执行>=1次，所以【如果算法里有循环，
		 * 那基本语句肯定就是这个循环语句，我们就直接忽略顺序语句和条件语句即可；如果算法里没有循环，基本语句
		 * 才可能是顺序语句和条件语句任选其一，选谁都无所谓，因为它们执行体的执行次数都是1】
		 * 
		 * 第二步：计算基本语句执行体的执行次数
		 * 
		 * 第三步：并且把该省略的部分省略掉从而得到执行体的执行数量级，用O(执行数量级)就得到了该算法的时间复杂度
		 */
	}
	
	/*
	 * 第一步：找算法中的基本语句及基本语句的执行体
	 * 发现有个for循环，那基本语句就是这个for循环语句了，它的执行体就是那一条打印
	 * 
	 * 第二步：计算基本语句执行体的执行次数
	 * 这个for循环只会循环4次，所以基本语句执行体的执行次数为4
	 * 
	 */
	public static void test1_1(int n) {
		System.out.println("test");
		
		if (n > 10) {
			System.out.println("n > 10");
		} else if (n > 5) {
			System.out.println("n > 5");
		} else {
			System.out.println("n <= 5");
		}
		
		for (int i = 0; i < 4; i++) {
			System.out.println("test");
		}
	}
}
